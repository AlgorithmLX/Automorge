apply from: 'https://raw.githubusercontent.com/OnyxStudios/Gradle-Scripts/master/scripts/fabric/publish/changelog.gradle'

task checkGitStatus() {
    group = 'publishing'
    description = 'Checks that the git repository is in a state suitable for release'
    doLast {
        if (grgit == null) throw new RuntimeException('No git repository')
        if (!grgit.status().isClean()) {
            throw new RuntimeException("Git repository not ready for release (${grgit.status()})")
        }
        def currentBranch = grgit.branch.current().getName()
        if (currentBranch != 'main' && !currentBranch.matches(/\d\.\d{2}/)) {
            throw new RuntimeException("Need to be on main or a dedicated version branch to release (currently on ${currentBranch})")
        }
        grgit.fetch()
        if (grgit.tag.list().any { it.name == project.version }) {
            throw new RuntimeException("A tag already exists for ${project.version}")
        }
        def status = grgit.branch.status(name: currentBranch)
        if (status.aheadCount != 0) {
            throw new RuntimeException('Some commits have not been pushed')
        }
        if (status.behindCount != 0) {
            throw new RuntimeException('Some commits have not been pulled')
        }
    }
}

githubRelease {
    token "${findProperty('github_releases_token')}"
    // default owner: last component of maven group
    // default repo: name of the project
    tagName = project.version
    targetCommitish = { grgit.branch.current().name }
    body = { project.getChangelogText() }

    FilenameFilter filter = { dir, filename -> filename.contains(project.version) && !filename.contains('-dev.jar') }
    releaseAssets = { jar.destinationDirectory.asFile.get().listFiles filter }
}
tasks.githubRelease.dependsOn(checkGitStatus)

artifactory {
    if (project.hasProperty("artifactory_user")) {
        contextUrl = "https://ladysnake.jfrog.io/artifactory/"
        publish {
            repository {
                repoKey = "mods"

                username = artifactory_user
                password = artifactory_api_key
            }
            defaults {
                publications("mavenJava")

                publishArtifacts = true
                publishPom = true
            }
        }
    } else {
        println "Cannot configure artifactory; please define ext.artifactory_user and ext.artifactory_api_key before running artifactoryPublish"
    }
}

artifactoryPublish.dependsOn(checkGitStatus)
artifactoryPublish.dependsOn build

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                classifier null
                builtBy remapJar
            }
            artifact(proguard) {
                classifier 'optimized'
                builtBy proguard
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
            pom {
                name = project.mod_name
                licenses {
                    license {
                        name = 'GNU Lesser General Public License 3.0'
                        url = 'https://www.gnu.org/licenses/lgpl-3.0.html'
                    }
                }
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        mavenLocal()
    }
}

task release(dependsOn: [tasks.publish, tasks.githubRelease, tasks.artifactoryPublish]) {
    group = 'publishing'
    description = 'Releases a new version to Maven and Github'
}
